/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package co.elastic.gradle.dockercomponent.lockfile;


import co.elastic.gradle.utils.Architecture;
import co.elastic.gradle.utils.docker.UnchangingContainerReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import org.gradle.api.tasks.Input;

import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.util.Map;

public record ComponentLockfile(Map<Architecture, UnchangingContainerReference> images) {

    @Input
    public Map<Architecture, UnchangingContainerReference> getImages() {
        return images();
    }

    public static ComponentLockfile parse(Reader reader) throws IOException {
        ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
        return mapper.readValue(reader, ComponentLockfile.class);
    }

    public static void write(ComponentLockfile lockfile, Writer writer) throws IOException {
        ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
        writer.write("# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n");
        mapper.writeValue(writer, lockfile);
    }



}
